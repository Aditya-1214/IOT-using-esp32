// ----- Blynk Credentials -----
  #define BLYNK_TEMPLATE_ID "TMPL3XoKsbXOI"
  #define BLYNK_TEMPLATE_NAME "IoT Smart Exhaust Fan"
  #define BLYNK_AUTH_TOKEN  "AY5UvLE8idy0MOZdBBRkJXcqVWGowL6O"

  #include <Wire.h>
  #include <LiquidCrystal_I2C.h>
  #include <SPI.h>
  #include <MFRC522.h>
  #include <ESP32Servo.h>
  #include <dht.h>
  #include <BlynkSimpleEsp32.h>


  // ----- Pin Definitions -----
  // LCD (I2C)
  #define LCD_SDA 21
  #define LCD_SCL 22

  // RFID (SPI)
  #define RFID_SS_PIN 5
  #define RFID_RST_PIN 4

  // Buzzer
  #define BUZZER 32

  // MQ2 Gas Sensor
  #define MQ2_PIN 34

  // Servo for Gate
  #define SERVO_PIN 33

  // Flame Sensor & Fan Relay (relay now triggered by gas sensor threshold)
  #define FLAME_SENSOR 27   // Digital output: LOW means flame detected
  #define FAN_RELAY    26   // Relay control pin for fan

  // DHT Sensor (Temperature & Humidity)
  #define DHT11_PIN 14
  dht DHT;

  // ----- Module Initializations -----
  LiquidCrystal_I2C lcd(0x27, 16, 2);
  MFRC522 mfrc522(RFID_SS_PIN, RFID_RST_PIN);
  Servo gateServo;

  // ----- Global Variables -----
  String rfidStr = "";
  const String validUID = "4A92DA3";

  // Manual fan control override via Blynk (V3): 1 = manual ON, 0 = automatic
  int manualFan = 0;

  // Blynk Write handler for Fan Control (V3)
  BLYNK_WRITE(V3) {
    manualFan = param.asInt(); // 1 to force fan ON, 0 for auto mode
    Serial.println("Fan Control Override: " + String(manualFan));
  }

  // Update Blynk virtual pins with sensor data
  void updateBlynkData(int temperature, int humidity, int gasPercent, bool fire) {
    Blynk.virtualWrite(V1, temperature);
    Blynk.virtualWrite(V2, humidity);
    Blynk.virtualWrite(V0, gasPercent);
    Blynk.virtualWrite(V4, (int)fire);  // Explicitly converting boolean to int (1 or 0)

  }

  // Function to read DHT sensor and output temperature & humidity
  void displayDHTData(int &temperature, int &humidity) {
    int chk = DHT.read11(DHT11_PIN);
    temperature = DHT.temperature;
    humidity = DHT.humidity;
    Serial.print("T:");
    Serial.print(temperature);
    Serial.print("C H:");
    Serial.print(humidity);
    Serial.println("%");
  }

  // Function to read MQ2 sensor and return gas percentage (0-100)
  int readGasPercentage() {
    int rawValue = analogRead(MQ2_PIN);
    int gasPercent = map(rawValue, 0, 4095, 0, 100);
    Serial.println("Gas:" + String(gasPercent) + "%");
    return gasPercent;
  }
  // Function to get flame sensor status (returns true if flame detected)
  bool getFlameStatus() {
    return (digitalRead(FLAME_SENSOR) == LOW);
  }

  // Function to rotate servo clockwise (for gate control)
  void rotateClockwise() {
    int angle = 180, speed = 15;
    for (int pos = 0; pos <= angle; pos += speed) {
      gateServo.write(pos);
      delay(speed);
    }
  }

  // Function to rotate servo anticlockwise
  void rotateAnticlockwise() {
    int angle = 180, speed = 15;
    for (int pos = angle; pos >= 0; pos -= speed) {
      gateServo.write(pos);
      delay(speed);
    }
  }

  void setup() {
    // Start Serial for debugging
    Serial.begin(115200);
    
    // Initialize Blynk with WiFi credentials
    Blynk.begin(BLYNK_AUTH_TOKEN, "Adi", "123456789");
    
    // Initialize LCD (I2C)
    Wire.begin(LCD_SDA, LCD_SCL);
    lcd.init();
    lcd.backlight();
    
    // Initialize RFID (SPI)
    SPI.begin();
    mfrc522.PCD_Init();
    
    // Setup pins
    pinMode(BUZZER, OUTPUT);
    digitalWrite(BUZZER, LOW);
    
    pinMode(MQ2_PIN, INPUT);
    
    gateServo.attach(SERVO_PIN);
    gateServo.write(0);
    
    pinMode(FLAME_SENSOR, INPUT);
    pinMode(FAN_RELAY, OUTPUT);
    digitalWrite(FAN_RELAY, LOW);
    
    pinMode(DHT11_PIN, INPUT);
    
    lcd.setCursor(0, 0);
    lcd.print("Scan RFID Card");
  }

  void loop() {
    Blynk.run();
    
    // ----- Sensor Readings -----
    int gasPercent = readGasPercentage();
    int temperature = 0, humidity = 0;
    displayDHTData(temperature, humidity);
  

    bool flame = getFlameStatus();  // flame true if detected
    // Fan Relay: In auto mode, turn on if gas > 40%; manual override if set to 1.
    if (gasPercent < 40) {
      digitalWrite(FAN_RELAY, HIGH);
    } else {
      digitalWrite(FAN_RELAY, LOW);
    }
    
    // Update Blynk with sensor data
    updateBlynkData(temperature, humidity, gasPercent, flame);
    
    // ----- Update LCD Display -----
    // Format on one 16x2 screen:
    // Line 1: T:xxC H:xx%
    // Line 2: G:xx% F:Y/N
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("T:" + String(temperature) + "C H:" + String(humidity) + "%");
    lcd.setCursor(0, 1);
    lcd.print("G:" + String(gasPercent) + "% F:" + (flame ? "Y" : "N"));
    
    // ----- RFID Scanning Block -----
    if (mfrc522.PICC_IsNewCardPresent()) {
      if (mfrc522.PICC_ReadCardSerial()) {
        rfidStr = "";
        for (byte i = 0; i < mfrc522.uid.size; i++) {
          rfidStr += String(mfrc522.uid.uidByte[i], HEX);
        }
        rfidStr.toUpperCase();
        Serial.println("RFID:" + rfidStr);
        
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("RFID Detected!");
        lcd.setCursor(0, 1);
        lcd.print("UID:" + rfidStr);
        
        if (rfidStr == validUID) {
          Serial.println("Access Granted!");
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Access Granted!");
          digitalWrite(BUZZER, LOW);
          // Rotate servo for valid RFID
          rotateClockwise();
          delay(5000);
          rotateAnticlockwise();
        } else {
          Serial.println("Access Denied!");
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Access Denied!");
          digitalWrite(BUZZER, HIGH);
          delay(2000);
          digitalWrite(BUZZER, LOW);
        }
        delay(3000); // Delay before returning to sensor display
      }
    }
    
    delay(1000); // Main loop delay
  }
